<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:property-placeholder location="classpath*:movieland.properties"/>

    <context:component-scan base-package="com.nabivach">
        <context:exclude-filter type="regex" expression="com\.nabivach\.movieland\.controller\..*"/>
    </context:component-scan>

    <!--DAO BEAN-->

    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${dataSource.driverClassName}"/>
        <property name="url" value="${dataSource.url}"/>
        <property name="username" value="${dataSource.username}"/>
        <property name="password" value="${dataSource.password}"/>
        <property name="initialSize" value="${dataSource.initialSize}"/>
        <property name="maxTotal" value="${dataSource.maxTotal}"/>
    </bean>

    <!-- QUERY BEANS STRING CLASS-->

    <bean id="getAllMoviesSQL" class="java.lang.String">
        <constructor-arg value="select id, name, original_name, release_year, rating from movie"/>
    </bean>

    <bean id="getCountryForMovieSQL" class="java.lang.String">
        <constructor-arg
                value="select c.* from movie_country mc join country c on mc.country_id = c.id where mc.movie_id = ?"/>
    </bean>

    <bean id="getGenresForMovieSQL" class="java.lang.String">
        <constructor-arg
                value="select g.* from movie_ganre mg join genre g on mg.genre_id = g.id where mg.movie_id = ?"/>
    </bean>

    <bean id="getReviewForMovieSQL" class="java.lang.String">
        <constructor-arg value="select rv.* from review rv where rv.movie_id = ? limit ?"/>
    </bean>

    <bean id="getMovieByIdSQL" class="java.lang.String">
        <constructor-arg value="select * from movie where movie_id = ?"/>
    </bean>

    <bean id="getGenresForAllMoviesSQL" class="java.lang.String">
        <constructor-arg value="select g.name,mg.movie_id  from movie_ganre mg join genre g on mg.genre_id = g.id"/>
    </bean>

    <bean id="addReviewSQL" class="java.lang.String">
        <constructor-arg value="insert into review (movieuser_id, movie_id, description) values (  "/>
    </bean>

        <bean id="deleteReviewRequestSQL" class="java.lang.String">
        <constructor-arg value="delete from review r where r.id = "/>
    </bean>

    <bean id="getMoviesSearchRequestPrefix" class="java.lang.String">
        <constructor-arg value="SELECT DISTINCT movie.id, movie.name, movie.original_name, movie.release_year, movie.rating FROM movie
    join movie_ganre on movie.id = movie_ganre.movie_id
    join movie_country on movie.id = movie_country.movie_id
    join genre on genre.id = movie_ganre.genre_id
    join country on country.id = movie_country.country_id"/>
    </bean>

    <bean id="getUserByCredentials" class="java.lang.String">
    <constructor-arg value="SELECT id, name, email, pass FROM movieUser WHERE is_deleted = false AND email = :email"/>
</bean>
    <!-- JDBC TEMPLATE-->

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="namedJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg ref="dataSource"/>
    </bean>

</beans>